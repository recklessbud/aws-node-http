name: Deploy Production App

on:
  push:
    branches: [ main ]
  pull_request:
    types: [ closed ]
  workflow_dispatch:

jobs:
  build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      STAGE: prod
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "20.11"
        cache: 'npm'
    - name: Install serverless
      run: npm install -g serverless --legacy-peer-deps
    - name: Authenticate Serverless Framework
      run: echo "SERVERLESS_ACCESS_KEY=${{ secrets.SERVERLESS_ACCESS_KEY }}" >> $GITHUB_ENV
    - name: Install dependencies
      run: npm install --force --legacy-peer-deps
    - name: Get Database URL
      run: |
        echo "DATABASE_URL=$(aws ssm get-parameter --name "/serverless-demo/prod/database-url" --with-decryption --query "Parameter.Value" --output text)" >> $GITHUB_ENV
    - name: Get direct URL
      run: |
        echo "DIRECT_URL=$(aws ssm get-parameter --name "/serverless-demo/prod/direct-url" --with-decryption --query "Parameter.Value" --output text)" >> $GITHUB_ENV
    - name: Verify Environment Variables
      run: |
        echo "Checking DATABASE_URL..."
        if [ -z "$DATABASE_URL" ]; then
          echo "DATABASE_URL is empty"
          exit 1
        fi 
        echo "Checking DIRECT_URL..."
        if [ -z "$DIRECT_URL" ]; then
          echo "DIRECT_URL is empty"
          exit 1
        fi
    - name: Run migrations
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
        DIRECT_URL: ${{ env.DIRECT_URL }}
      run: |
        npx dotenv -e .env.dev -- prisma migrate dev --name init
    - name: Deploy
      run: npm run deploy:prod
